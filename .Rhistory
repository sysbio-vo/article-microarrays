s =factor(c("yes","no","yes","maybe","maybe","no","maybe","no","no"))
s
view(s)
View(s)
s
ordered(as.factor(c("First","Third","Second","Fifth","First","First","Third")),levels= c("First","Second","Third","Fourth","Fifth"))
s =factor(c("yes","no","yes","maybe","maybe","no","maybe","no","no"))
ordered(as.factor(c("First","Third","Second","Fifth","First","First","Third")),levels= c("First","Second","Third","Fourth","Fifth"))
ordered(as.factor(c("First", "Third", "Second", "Fifth","First","First","Third")),levels= c("First","Second","Third","Fourth","Fifth"))
help(factor)
ordered(as.factor(c("First", "Third", "Second", "Fifth","First","First","Third")),levels= c("First","Second","Third","Fourth","Fifth"))
s =factor(c("yes","no","yes","maybe","maybe","no","maybe","no","no"))
s
ordered(as.factor(c("First", "Third", "Second", "Fifth","First","First","Third")),levels= c("First","Second","Third","Fourth","Fifth"))
library(datasets)
help(datasets)
libray(help = "datasets")
library(help = "datasets")
library(help = "datasets")
library(deSolve)
c<-1.34
c<-3
c<-1.34
c<-3
help(factor)
help(c)
help(factor)
strVector=c("Bill Gates", "Donald Tramp", "Haruki Murakami")
type(s)
class(s)
weatherType = c("warm", "cool", "cold", "cool")
myFactor= factor(weatherType)
myFactor
View(myFactor)
X<-matrix(data = 1:15, nrow = 5, ncol = 5, byrow = T)
X
X<-matrix(data = 1:15, nrow = 5, ncol = 5, byrow = F)
X
mt <- matrix(1,5,5,6,6,6,64,4 )
mt <- matrix(c(1,5,5,6,6,6,64,4 ))
mt
mt <- matrix(c(1,5,5,6,6,6,64,4 ), nrow = 3)
X<-matrix(data = 1:15, nrow = 5, ncol = 5, byrow = T)
mt <- matrix(c(1,5,5,6,6,6,64,4 ), nrow = 3)
mt <- matrix(c(1,5,5,6,6,6,64,4,7,8 ), nrow = 3)
mt <- matrix(c(1,5,5,6,6,6,64,4,7 ), nrow = 3)
mt
myList <- data.frame(x,y,z)
x <- c(1:4)
y <- FALSE
z <- matrix(c(1:4),nrow=2,ncol=2)
myList <- data.frame(x,y,z)
myList
v1 = 1:5
v2 = c(T,T,F,F,T)
v3 = c("csdf","sdf", "sdf","sdfs", "sdfs")
df = data.frame(v1,v2)
df
df = data.frame(v1,v2,v3)
df
df
myList <- list(z,y,z)
myList
df[1]
class(df[1])
df[1,]
class(df[1,])
class(df[,1])
class(df[,1])
df[,1]
df
df
factor(df$v3)
levels(df$v3)
dim(df)
summary(df)
class(summary(df))
s="sfglksdf"
s[3]
s[3:4]
c(s)
as.vector(s)
length(s)
N <- 10^2
x1 <- rnorm(N)
x1
help(rnorm(x1))
help(rnorm)
x2 <- 1 + x1 + rnorm(N)
plot(0)
plot(0,1)
plot(0)
plot(0,1)
plot(x1)
plot(x1,x2) # scatter plot x1 on the horizontal axis and x2 on the vertical axis
plot(x1)
plot(x1,x2) # scatter plot x1 on the horizontal axis and x2 on the vertical axis
x2 <-  x1 + rnorm(N)
plot(x1,x2) # scatter plot x1 on the horizontal axis and x2 on the vertical axis
x2 <-  x1 - rnorm(N)
plot(x1,x2) # scatter plot x1 on the horizontal axis and x2 on the vertical axis
x2 <-  x1
plot(x1,x2) # scatter plot x1 on the horizontal axis and x2 on the vertical axis
plot(x2 ~ x1) # the same but using a formula (x2 as a function of x1)
1 +
x2 <- 1 + x1 + rnorm(N)
plot(x1,x2) # scatter plot x1 on the horizontal axis and x2 on the vertical axis
plot(x1,x2) # scatter plot x1 on the horizontal axis and x2 on the vertical axis
x1 <- rnorm(N)
x2 <- 1 + x1 + rnorm(N)
plot(x1,x2) # scatter plot x1 on the horizontal axis and x2 on the vertical axis
plot(x2 ~ x1) # the same but using a formula (x2 as a function of x1)
plot(x1,x2) # scatter plot x1 on the horizontal axis and x2 on the vertical axis
plot(x2 ~ x1) # the same but using a formula (x2 as a function of x1)
plot(x2 ~ x1) # the same but using a formula (x2 as a function of x1)
methods(plot) # show all the available methods for plot (depending on the number of loaded packages)
plot(x1,x2, main = "Main title", sub = "sub title" , ylab = "Y axis", xlab = "X axis")
plot(x1,x2 ,  ylab = "Y axis", xlab = "X axis")
title(main = "Main title", sub = "sub title" )
title(main = "Main title", sub = "sub title" )
abline(x1,x2, col=4, lwd=5, lty=2)
plot(x1,x2, main = "Main title", sub = "sub title" , ylab = "Y axis", xlab = "X axis")
plot(x1,x2 ,  ylab = "Y axis", xlab = "X axis")
title(main = "Main title", sub = "sub title" )
abline(x1,x2, col=4, lwd=5, lty=2)
help(abline)
abline(x1,x2, col=4, lwd=5, lty=2)
abline(x1,x2, col=4, lwd=55, lty=2)
abline(x1,x2, col=4, lwd=5, lty=2)
abline(x1,x2, col=4, lwd=5, lty=2)
plot(x1,x2 ,  ylab = "Y axis", xlab = "X axis")
title(main = "Main title", sub = "sub title" )
abline(x1,x2, col=4, lwd=5, lty=2)
abline(x1,x2, col=4, lwd=10, lty=2)
scatter.smooth(
abline(x1,x2, col=4, lwd=10, lty=10)
abline(x1,x2, col=4, lwd=10, lty=10)
abline(x1,x2, col=4, lwd=10, lty=10)
abline(x1,x2, col=4, lwd=10, lty=10)
legend("bottomright", legend = c("x1"), col = 4, lty = 2, lwd=5)
# Plotting. Example3.
x <- rnorm(1000)
hist(x, probability = T) # The default uses Sturges method.
hist(x, probability = F) # The default uses Sturges method.
hist(x, probability = T) # The default uses Sturges method.
x <- rnorm(1000)
hist(x, probability = T) # The default uses Sturges method.
x <- rnorm(1000)
hist(x, probability = T) # The default uses Sturges method.
help(normfit)
??normfit
x <- c(1,2.3,2,3,4,8,12,43,-4,-1)
mean(x)
# Correlation
x <- mtcars[1:3]
y <- mtcars[4:6]
x
y
cor(x, y)
x <- rnorm(100, mean=0)
shapiro.test(x)
x <- rnorm(100, mean=0)
shapiro.test(x)
x <- rnorm(100, mean=0)
shapiro.test(x)
x <- rnorm(100, mean=0)
shapiro.test(x)
x <- rnorm(100, mean=0)
shapiro.test(x)
x <- rnorm(100, mean=0)
shapiro.test(x)
x <- rnorm(100, mean=0)
shapiro.test(x)
x <- rnorm(100, mean=0)
shapiro.test(x)
x <- c(1,2.3,2,3,4,8,12,43,-4,-1)
r <- sd(x)
r
# Standard error
x <- c(1,2.3,2,3,4,8,12,43,-4,-1)
se <- sd(x)/sqrt(length(x))
se
# Chi-Square test
x<- matrix(c(86,96,38,96),nrow=2,ncol=2)
x
chisq.test(x)
# Student's t-test, non-paired
plot(x2 ~ x1+1) # the same but using a formula (x2 as a function of x1)
plot(x2 ~ x1+100) # the same but using a formula (x2 as a function of x1)
plot(x2 ~ x1+100) # the same but using a formula (x2 as a function of x1)
plot(x2+100 ~ x1) # the same but using a formula (x2 as a function of x1)
plot(x2+rstandard() ~ x1) # the same but using a formula (x2 as a function of x1)
rnorm()
rnorm(1)
plot(x2 +rnorm(1) ~ x1) # the same but using a formula (x2 as a function of x1)
methods(plot) # show all the available methods for plot (depending on the number of loaded packages)
plot(x2 +rnorm(1) ~ x1) # the same but using a formula (x2 as a function of x1)
methods(plot) # show all the available methods for plot (depending on the number of loaded packages)
plot(x2 +rnorm(1) ~ x1) # the same but using a formula (x2 as a function of x1)
plot(x2 +rnorm(1) ~ x1) # the same but using a formula (x2 as a function of x1)
plot(x2 +rnorm(1) ~ x1) # the same but using a formula (x2 as a function of x1)
plot(x2 +10* rnorm(1) ~ x1) # the same but using a formula (x2 as a function of x1)
plot(x1 +10* rnorm(1) ~ x1) # the same but using a formula (x2 as a function of x1)
plot(x1 ~ x1) # the same but using a formula (x2 as a function of x1)
plot(x1+1 ~ x1) # the same but using a formula (x2 as a function of x1)
plot(x1/2~ x1) # the same but using a formula (x2 as a function of x1)
plot(x1+x1~ x1) # the same but using a formula (x2 as a function of x1)
x <- rnorm(100, mean=0)
shapiro.test(x)
help("shapiro.test")
x <- rnorm(1000, mean=0)
shapiro.test(x)
x <- rnorm(1000, mean=0)
shapiro.test(x)
x <- rnorm(1000, mean=0)
shapiro.test(x)
x <- rnorm(1000, mean=0)
shapiro.test(x)
iris
iris
a = aov(Sepal.Length~Species, data=iris)
summary(a)
a
CO2
head(CO2)
a=aov(uptake~Type*Treatment, data=CO2)
summary(a)
iris
a = aov(Sepal.Length~Species, data=iris)
summary(a)
head(iris0
head(iris)
a = aov(Sepal.Length~Species, data=iris)
a = aov(Sepal.Length~Species, data=iris)
head(iris)
a = aov(Sepal.Length~Species, data=iris)
summary(a)
head(iris)
a = aov(Sepal.Length~Species, data=iris)
summary(a)
library("entropy")
library("entropy")
install.packages("entropy")
install.packages("entropy")
install.packages("entropy")
library(entropy)
install.packages(entropy)
install.packages("entropy")
install.packages("entropy")
setRepositories()
install.packages("entropy")
library(hugene10sthsentrezgprobe)
source("https://bioconductor.org/biocLite.R")
#' Installs brainarray CDF and probe information packages
#'
#' This package downloads, installs, and/or loads the brainarray CDF and probe
#' enviroments from the Brainarray website.
#'
#' @param array A character of length 1 giving the giving the name of the
#'   array.
#' @param version A character of length 1 giving the version to download.
#' @param type A charcter giving the annotation type.
#' @param force.reinstall logical. Should the package be installed again?
#' @param force.download logical. Should the package be downloaded again?
#' @param use.temp.dir logical. Should a temporary dir be used?
#' @param path A charcter of length 1. The path describing where the downloaded
#'   files are saved.
#' @return Invisibly returns the location of the saved files.
#' @author Anders Ellern Bilgrau <anders.ellern.bilgrau (at) gmail.com>
#' @seealso \code{\link{tempdir}}, \code{\link{install.packages}}
#' @references
#'   See \url{http://brainarray.mbni.med.umich.edu}.
#' @examples
#' tmp.path <- install.brainarray("hgu133a", version = "18.0.0", type = "ensg")
#' print(tmp.path)
#'
#'
#'
#' @export
# Use a package (e.g. digest) to read the brainarray package and avoid most
# hardcoded functionality of this function!
install.brainarray <- function(array,
version = "19.0.0",
type = "entrezg",
force.reinstall = FALSE,
force.download = FALSE,
use.temp.dir = TRUE,
path) {
#array <- "hgu133plus2"
#array <- "hugene10st"
#force.reinstall <- TRUE; force.download <- TRUE; use.temp.dir <- TRUE
# Construct the file names used
files <- paste0(array, "hs", type, c("cdf_", "probe_", ".db_"), version, ".tar.gz")
# Load or install if not installed
package.name <- paste0(array, "hs", type, c("cdf", "probe", ".db"))
# Prepare to download
# Base URL to the brainarray site
base.url <-
paste0("http://mbni.org/customcdf/",
version, "/" , type, ".download")
# Path to download files to
if (missing(path)) {
path <- ifelse(use.temp.dir,
tempdir(),
file.path(array, "Brainarray"))
}
# Loop through the packages
for (i in seq_along(package.name)) {
pkg <- package.name[i]
# Is pkg installed... ?
if (!(force.download | force.reinstall) &
requireNamespace(pkg)) {
# ... and is it the correct version?
if (packageVersion(pkg) == version) {
next  # if yes, then do the next pkg
}
} else {
# Create the dir
dir.create(path = path, recursive = TRUE, showWarnings = FALSE)
# Download the files if they are not already
if (!file.exists(file.path(path, files[i])) | force.download) {
download.file(url = file.path(base.url, files[i]),
destfile = file.path(path, files[i]))
}
# Install package
install.packages(pkgs = file.path(path, files[i]),
repos = NULL, type = "source")
# Require package
requireNamespace(pkg)
}
}
return(invisible(file.path(path, files)))
}
#install.brainarray("hgu133plus2")
biocLite(hugene10sthsentrezgprobe)
biocLite("hugene10sthsentrezgprobe")
installed.packages("evaluate")
installed.packages("XML")
installed.packages("survival")
installed.packages(survival)
biocLite("survival")
package_df <- as.data.frame(installed.packages("/home/sashko/R/x86_64-pc-linux-gnu-library/3.3/"))
package_df
package_list <- as.character(package_df$Package)
package_list
install.packages(package_list)
install.packages(package_list)
install.packages("shiny")
install.packages("shiny")
install.packages("httpuv")
install.packages(c("Rcpp", "httpuv", "shiny"))
install.packages("codetools")
install.packages("httpuv")
install.packages("shiny")
library(affy)
library(sva)
library(stringr)
library(ggplot2)
library(ggfortify)
library(cowplot)
library(ArrayExpress)
setwd('/home/sashko/a/r/article-microarrays-sashko')
rawspath = 'raws/affymetrix'
prepath = 'preprocessed/affymetrix'
pdatapath = 'pdata/'
plotsqcpath = paste(getwd(), 'plots/qc/', sep='/')
studies <- read.table("general/affymetrix_placenta_studies.tsv", header = TRUE, sep = "\t")
igea = read.table('igea_tsv/samples.tsv',header = TRUE, sep = '\t', fill = TRUE)
for (array in levels(studies$platformAbbr)){
install.brainarray(array)
}
i = 1
current_path = paste(rawspath, '/', studies$accession[[i]], sep='')
if (! dir.exists(current_path)){
dir.create(current_path)
}
aeData = getAE(
studies$accession[[i]],
path = current_path,
sourcedir=current_path,
local=TRUE,
type = 'raw')
aepd <- ArrayExpress:::readPhenoData(aeData$sdrf, aeData$path)
pd = merge(pData(aepd), igea, all.x = TRUE, by.x = 'Source.Name', by.y = 'Sample.Name')
View(pd)
aepd <- ArrayExpress:::readPhenoData(aeData$sdrf, aeData$path)
aeData = getAE(
studies$accession[[i]],
path = current_path,
sourcedir=current_path,
local=TRUE,
type = 'raw')
i = 1
current_path = paste(rawspath, '/', studies$accession[[i]], sep='')
if (! dir.exists(current_path)){
dir.create(current_path)
}
setwd('/home/sashko/a/r/article-microarrays-sashko')
rawspath = 'raws/affymetrix'
prepath = 'preprocessed/affymetrix'
pdatapath = 'pdata/'
plotsqcpath = paste(getwd(), 'plots/qc/', sep='/')
studies <- read.table("general/affymetrix_placenta_studies.tsv", header = TRUE, sep = "\t")
igea = read.table('igea_tsv/samples.tsv',header = TRUE, sep = '\t', fill = TRUE)
for (array in levels(studies$platformAbbr)){
install.brainarray(array)
}
i = 1
current_path = paste(rawspath, '/', studies$accession[[i]], sep='')
if (! dir.exists(current_path)){
dir.create(current_path)
}
library(affy)
library(sva)
library(stringr)
library(ggplot2)
library(ggfortify)
library(cowplot)
library(ArrayExpress)
setwd('/home/sashko/a/r/article-microarrays-sashko')
rawspath = 'raws/affymetrix'
prepath = 'preprocessed/affymetrix'
pdatapath = 'pdata/'
plotsqcpath = paste(getwd(), 'plots/qc/', sep='/')
studies <- read.table("general/affymetrix_placenta_studies.tsv", header = TRUE, sep = "\t")
igea = read.table('igea_tsv/samples.tsv',header = TRUE, sep = '\t', fill = TRUE)
for (array in levels(studies$platformAbbr)){
install.brainarray(array)
}
i = 1
current_path = paste(rawspath, '/', studies$accession[[i]], sep='')
if (! dir.exists(current_path)){
dir.create(current_path)
}
aeData = getAE(
studies$accession[[i]],
path = current_path,
sourcedir=current_path,
local=TRUE,
type = 'raw')
aepd <- ArrayExpress:::readPhenoData(aeData$sdrf, aeData$path)
pd = merge(pData(aepd), igea, all.x = TRUE, by.x = 'Source.Name', by.y = 'Sample.Name')
affyData = ReadAffy(phenoData=pd,
sampleNames=pd$Sample.Name,
filenames=pd$Array.Data.File,
celfile.path=paste("../raws/affymetrix/",
studies[i,]$accession, sep=""))
setwd('/home/sashko/a/r/article-microarrays-sashko')
affyData = ReadAffy(phenoData=pd,
sampleNames=pd$Sample.Name,
filenames=pd$Array.Data.File,
celfile.path=paste("raws/affymetrix/",
studies[i,]$accession, sep=""))
pData(aepd) = pd
aepd
aepd <- ArrayExpress:::readPhenoData(aeData$sdrf, aeData$path)
aepd
rownames(aepd)
aepd <- ArrayExpress:::readPhenoData(aeData$sdrf, aeData$path)
rowNames = rownames(aepd)
pd = merge(pData(aepd), igea, all.x = TRUE, by.x = 'Source.Name', by.y = 'Sample.Name')
aepd <- ArrayExpress:::readPhenoData(aeData$sdrf, aeData$path)
rowNames = rownames(aepd)
pd = merge(pData(aepd), igea, all.x = TRUE, by.x = 'Source.Name', by.y = 'Sample.Name')
rowames(pd) = rowNames
aepd <- ArrayExpress:::readPhenoData(aeData$sdrf, aeData$path)
rowNames = rownames(aepd)
pd = merge(pData(aepd), igea, all.x = TRUE, by.x = 'Source.Name', by.y = 'Sample.Name')
rownames(pd) = rowNames
affyData = ReadAffy(phenoData=pd,
sampleNames=pd$Sample.Name,
filenames=pd$Array.Data.File,
celfile.path=paste("raws/affymetrix/",
studies[i,]$accession, sep=""))
aepd <- ArrayExpress:::readPhenoData(aeData$sdrf, aeData$path)
affyData = ReadAffy(phenoData=aepd,
sampleNames=pd$Sample.Name,
filenames=pd$Array.Data.File,
celfile.path=paste("raws/affymetrix/",
studies[i,]$accession, sep=""))
aepd <- ArrayExpress:::readPhenoData(aeData$sdrf, aeData$path)
affyData = ReadAffy(phenoData=aepd,
sampleNames=aepd$Sample.Name,
filenames=aepd$Array.Data.File,
celfile.path=paste("raws/affymetrix/",
studies[i,]$accession, sep=""))
aeData = getAE(
studies$accession[[i]],
path = current_path,
sourcedir=current_path,
type = 'raw')
aepd <- ArrayExpress:::readPhenoData(aeData$sdrf, aeData$path)
fllst <- split(aeData$rawFiles, pData(z)$Array.Design.REF)
fllst <- split(aeData$rawFiles, pData(aepd)$Array.Design.REF)
pkglst <- c("pd.hgu133b.hs.entrezg","pd.hgu133a.hs.entrezg")
affyData <- lapply(1:2, function(x) read.celfiles(
filenames = fllst[[x]],
pkgname = pkglst[x]))
library(affycoretools)
affyData <- lapply(1:2, function(x) read.celfiles(
filenames = fllst[[x]],
pkgname = pkglst[x]))
library(affy)
library(sva)
library(stringr)
library(ggplot2)
library(ggfortify)
library(cowplot)
library(ArrayExpress)
affyData <- lapply(1:2, function(x) read.celfiles(
filenames = fllst[[x]],
pkgname = pkglst[x]))
